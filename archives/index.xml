<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archives on 咸鱼白的窝</title>
    <link>https://blanca.world/archives/</link>
    <description>Recent content in Archives on 咸鱼白的窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>咸鱼白</copyright>
    <lastBuildDate>Sun, 31 Jan 2021 13:47:29 +0800</lastBuildDate><atom:link href="https://blanca.world/archives/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个C&#43;&#43;协程库的实现与优化</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%8714-%E4%B8%80%E4%B8%AAc&#43;&#43;%E5%8D%8F%E7%A8%8B%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 31 Jan 2021 13:47:29 +0800</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%8714-%E4%B8%80%E4%B8%AAc&#43;&#43;%E5%8D%8F%E7%A8%8B%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BC%98%E5%8C%96/</guid>
      <description>预备知识 在阅读本文之前，你应当:
  理解阻塞I/O与非阻塞I/O，同步调用与异步调用的概念。
  熟悉操作系统任务切换的过程（上下文的切换与保存）。
  了解X86-64-ABI。
  了解Linux下的I/O多路复用。
  本文所述的协程库源代码可以在我的github仓库获得。
协程是什么 (∩_∩)这种概念我就不慢慢解释了（偷个懒），自己查。
API Schedule Schedule::Schedule(); Schedule::Schedule(int size); 第一种方法会创建一个拥有1MB共享栈的schedule，该schedule创建的所有的共享栈协程都会共享这个1MB的运行栈。
第二种方法会创建一个schedule，其拥有的共享栈大小由stack_size参数决定。
即使一个schedule管理的所有协程都具有独立运行栈，使用者也必须为schedule创建至少100字节的共享栈。在我的设计中，所有协程在运行到末尾时都会销毁自有的栈，所有独立运行栈协程都必须在最后将运行栈切换到共享栈上以销毁其自有的独立运行栈（具体分析请见优化方案中具有独立运行栈的协程部分）。
coroutine_create int Schedule::coroutine_create(co_func func, void *args); int Schedule::coroutine_create(co_func func, void *args, int stack_type, int stack_size); 第一个方法会创建一个共享运行栈协程，该方法等价于: Schedule::coroutine_create(func, args, SAVED_STACK, 0);。
第二个方法在 stack_type 为SAVED_STACK时会创建一个共享运行栈协程，stack_size决定了用来保存运行栈内容的内存区域的初始大小，该内存区域大小会随着每次的协程挂起而动态调整，所以建议将stack_size设为0。
第二个方法在 stack_type 为INDEPENDENT_STACK时会创建一个独立运行栈协程，stack_size决定了独立运行栈的大小。
coroutine_destroy void Schedule::coroutine_destroy(int co_id); 这个方法会销毁由co_id指定的协程。
coroutine_resume void Schedule::coroutine_resume(int co_id); 这个方法会将主协程切换到非主协程（由参数co_id指定）。
coroutine_yield void Schedule::coroutine_yield(); 这个方法会将正在运行的非主协程挂起并切换到主协程。
coroutine_status int Schedule::coroutine_status(int co_id); 这个方法会返回一个协程（由参数co_id指定）的状态，状态（在coroutine.</description>
    </item>
    
    <item>
      <title>迟到的2020年终总结</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%8713-2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 23 Jan 2021 19:11:11 +0800</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%8713-2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <description>这里是咸鱼白没人看的博客，能看到这篇迟到的2020年终总结的大抵都是那几个在深夜倾听过我诉说的朋友，如果看到这里的你恰巧是个陌生人还愿意看完我的胡言乱语，那么，提前祝你晚安。
2020年于我而言算是人生的转折点，距离上一个人生转折点刚好十年，整整十年，还真是够巧的。
上半年，我一直在努力完成2019年年终总结中定下的目标，即Blanca-OS的实现，在六月的时候基本只剩内存管理模块遗留的bug以及文件系统没完成了，暑假暂时放了放这一项目，去研究了一下Linux系统编程以及协程相关的内容，原计划九月开学继续写完Blanca-OS，可惜终究因为下半年的变故搁置了，不过虽然我至今仍未完成Blanca-OS，但我个人感觉自己的综合能力（对程序背后运行过程的理解，对有效信息的检索，对调试工具的运用等等）已经在上半年的磨砺中产生了飞跃并在近阶段的编程实践中得到了很好的体现。
下半年，父亲查出肝癌晚期，然后过世，说实话，对我打击很大。下半年有那么一段时间内我无法进入以往的状态，常常躺在床上审视过去十年的人生。
我以前经常看不懂自己到底是个什么样的人，我一直活得很奇怪，现在我想给以前的自己下个定义：一个本质极度感性却又崇尚绝对理性却又无法做到的理想主义者。
童年的一些经历让我变得早熟且善于察觉别人的情绪变化，然而很多人都觉得我不会照顾别人的感受，实际上，我知道他们的感受，但我若是觉得自己的行为从逻辑上不构成错误，我会强行忽视观察到的情绪因素，我行我素。长久以来，我觉得我给自己装了一把锁，把自己的感性锁了起来，绝大多数负面的影响作用于我时，我也都会把它们锁起来，强行回避掉，只有在我身体不适时，这把锁才可能会松开一些，露出我更为感性且真实的一面。我可活得真拧巴。这两年，这把锁愈发像是坏了，兴许是锁住的太多，终于慢慢地挤坏了那把锁，我也开始越来越多地流露出感性的一面，愈发容易对他人倾诉心中苦郁，虽然有悖于我长期所持的理性至上的理念，但其实也挺不错，起码我感觉自己活得更像一个正常的“人”了。
我一直以来其实都是个很不负责任的人，十年前的经历让我变得惧怕责任且善于逃避责任，然而迟早有一天现实会教我做人，让我后悔，我希望2020年是我最后一次为自己的逃避而后悔。父亲走前并没有留下什么遗言，只是走前一晚让我打开他的邮箱，我当时答应他“好的，你要相信你儿子，有什么事情我都会处理好的”。最终我在他邮箱里找到三封给我的邮件，一封是他为防自己发生意外早已写好的遗书，交代的事情暂且不表。还有两封是早就写好的给我的信，但却一直没有发出，一封讲述了一个“朋友”的故事，关于这个“朋友”从小到大干过的很多蠢事，写给我以作前车之鉴，另一封是关于责任的信，他试图以切身体会教导我做为父亲该承担对儿子的责任，作为丈夫该承担对妻子的责任，作为儿子对父母的责任，知子莫若父，原来他也觉得他的儿子很不负责任吗？他去世后我时常翻看他写给我的邮件，时常反思自己过去的所作所为，我觉得我能完成那晚对他的承诺。
曾经不愿意和父母谈心，没想到和母亲能够交心谈话是在父亲走后，父亲在世的时候的各种说教我从来不愿意认真去听，临到他走了，我反而开始郑重其事地要信守承诺了，要开始接受他的教导了，呵，我这种人，多可笑！我以前总喜欢理想化一切，总认为事情会怎么这么地按照自己的规划发展，我常常对十年后，二十年后，三十年的我的生活会是怎样充满了期待，然鹅现实冷酷无情地把我扇醒，指不定这篇博文还没写完我就暴毙当场了呢？前一阵子看了一部很长很平淡的电影《少年时代》，深有感触，过去和未来，都不属于我，真正属于我的，只有现在这一瞬罢了，我能做的唯有珍惜当下拥有的一切，尽力做好现在的自己，这才是我的生活。
2020年末，向一个很久没见的朋友为曾经的不愉快道了歉，虽然这份歉意迟到了，但我仍然为自己能够勇敢地道歉感到开心，祝ta一切顺利，有缘再见。
现在，站在2021年年初，站在下一个十年开始的地方，我终于看懂了过去十年的我到底是个什么样的人，而现在的我，又到底是什么样的人？有了什么改变？又有什么没变？我今天总结出的到底有多少是我真正参悟透了的？我不知道，兴许要等到十年后回顾时才能得到答案。但这并不重要，起码我知道现在我应该做一个什么样的人，然后在每一个现在努力做好自己，这就够了。</description>
    </item>
    
    <item>
      <title>关于splice调用中易出现的一个bug的记录</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%8712-%E5%85%B3%E4%BA%8Esplice%E8%B0%83%E7%94%A8%E4%B8%AD%E6%98%93%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AAbug%E7%9A%84%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 17 Jan 2021 23:40:11 +0800</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%8712-%E5%85%B3%E4%BA%8Esplice%E8%B0%83%E7%94%A8%E4%B8%AD%E6%98%93%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AAbug%E7%9A%84%E8%AE%B0%E5%BD%95/</guid>
      <description>问题 这两天打算过一遍《Linux高性能服务器编程》，虽然都是些熟悉的知识，但我还是把该书的源码一个个运行了试了试。然后发现了6-5testtee.cpp存在bug。
代码如下：
#include &amp;lt;assert.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;errno.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt; int main( int argc, char* argv[] ) { if ( argc != 2 ) { printf( &amp;#34;usage: %s &amp;lt;file&amp;gt;\n&amp;#34;, argv[0] ); return 1; } int filefd = open( argv[1], O_CREAT | O_WRONLY | O_TRUNC, 0666 ); assert( filefd &amp;gt; 0 ); int pipefd_stdout[2]; int ret = pipe( pipefd_stdout ); assert( ret != -1 ); int pipefd_file[2]; ret = pipe( pipefd_file ); assert( ret !</description>
    </item>
    
    <item>
      <title>干掉wine-qqmusic的黑框</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%8711-%E5%B9%B2%E6%8E%89wine-qqmusic%E7%9A%84%E9%BB%91%E6%A1%86/</link>
      <pubDate>Mon, 08 Jun 2020 20:25:11 +0800</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%8711-%E5%B9%B2%E6%8E%89wine-qqmusic%E7%9A%84%E9%BB%91%E6%A1%86/</guid>
      <description>问题 manjaro最新的版本更新之后，界面更美观了，然鹅使用wine安装的QQ音乐四周出现了大面积黑框，强迫症感觉有被冒犯到。
解决办法 安装wmctrl：
 sudo pacman -S wmctrl
 安装xdotool：
 sudo pacman -S xdotool
 查看当前窗口：
 wmctrl -l -G -p -x
 可以看到：
0x02600013 -1 2898 0 0 1920 1080 plasmashell.plasmashell xclwt-pc 桌面 — Plasma 0x03c00006 0 3096 130 157 1187 754 dolphin.dolphin xclwt-pc 下载 — Dolphin 0x0260003a -1 2898 0 1035 1920 45 plasmashell.plasmashell xclwt-pc Plasma 0x05a00007 0 3370184 0 29 960 488 konsole.konsole xclwt-pc commands : zsh — Konsole 0x05000077 0 2082025 535 215 850 605 wechat.</description>
    </item>
    
    <item>
      <title>Blanca-OS设计之中断（待更新）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%8710-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%AD%E6%96%AD/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%8710-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%AD%E6%96%AD/</guid>
      <description>中断 中断，即CPU接收到一定的信号，打断了当前的程序控制流以处理其他事务的机制。 中断主要可分为两类：同步中断与异步中断。 其中，同步中断又称异常，可分为故障（fault），陷阱（trap），终止（abort）三类。异步中断则简称为中断。
   类别       中断     故障     陷阱     终止      中断例程 Blanca-OS中的所有中断处理程序都要经过一段汇编实现的例程asm_isr_stub（见kernel/idt_asm.asm），该例程将中断将中断发生时的程序信息（主要是寄存器）快照压栈并调用中断号对应的中断处理程序，该快照在C语言中以如下结构体表示（见inc/idt.h）：
typedef struct{ /*段寄存器,16bit*/ uint32_t fs; uint32_t gs; uint32_t es; uint32_t ds; /*pusha保存的寄存器*/ uint32_t edi; uint32_t esi; uint32_t ebp; uint32_t esp; uint32_t ebx; uint32_t edx; uint32_t ecx; uint32_t eax; /*中断号*/ uint32_t intr_num; /*错误代码*/ uint32_t err_code; uint32_t eip; uint32_t cs; //16bit 	uint32_t eflags; /*特权级切换时才会压入ss及esp*/ uint32_t u_esp; uint32_t ss; //16bit }regs_t; 需要注意的是，并非所有的中断都会压入error code（错误代码），故中断发生时的程序快照结构体本应有两种，但此处为了方便后续程序的编写进行了统一，即在汇编macro生成的不压入错误代码的相关中断的处理程序中(见kernel/idt_s.</description>
    </item>
    
    <item>
      <title>Blanca-OS设计之线程，进程与锁（待更新）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%879-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E9%94%81/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%879-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E9%94%81/</guid>
      <description>线程与进程 线程与进程都是程序执行流，其区别在于进程拥有独立的地址空间与一些资源，而线程则需与其所属进程中的其他的线程共享地址空间与一些资源。Blanca-OS中参考了linux中的实现，采用了”伪“线程的概念，将所有程序执行流（每一个线程/进程都分配一个PCB）统一归为任务（Task）进行调度。
程序控制块（PCB） Blanca-OS管理线程与线程时统一使用了程序控制块（PCB），程序控制块结构体task_struct设计如下（见inc/thread.h）：
typedef struct{ uint8_t* kstack; uint8_t status; uint8_t priority; uint32_t run_time; list_node ready_list_node; list_node all_list_node; char name[16]; uint32_t* pgdir; uint32_t stack_boundary; }task_struct; （待完善）
严格来说，PCB并不仅限于这个结构体，还包含了kstack所指向的内核线程栈，整个PCB的内存结构如下图：
（待添加）
程序调度 程序切换 程序切换的操作由汇编实现（见thread/switch.asm），该操作保存了当前程序的上下文并切换到下一个程序去。
switch_to: mov eax,[esp + 4] mov [eax],esp mov eax,[esp + 8] push esi push edi push ebx push ebp mov esp,[eax] pop ebp pop ebx pop edi pop esi ret switch_to函数按照ABI将上下文（esi，edi，ebx，ebp寄存器的内容，esp寄存器值由调用约定保存）保存在当前程序的内核栈中，并切换出下一个程序的上下文，最后通过ret切换到下一个程序。
调度算法 锁 现阶段，Blanca-OS仅支持单处理器，故目前对于共享资源只提供了互斥锁（mutex）这一种机制以避免竞争。互斥锁的原理即将抢锁失败的任务阻塞并等待锁的释放。其实现主要采用了semaphore与mutex_lock两种数据结构（见inc/sync.h），锁的获取与释放代码如下:
void acquire_mutex(mutex_lock* mutex){ if(mutex-&amp;gt;holder != cur_thread()){ sema_busy(&amp;amp;(mutex-&amp;gt;sig));	//信号量设为忙碌 	mutex-&amp;gt;holder = cur_thread();	//将互斥锁持有者设为当前任务 	mutex-&amp;gt;request_num = 1;	//初始化互斥锁申请次数为1 	}else{ ++mutex-&amp;gt;request_num;	//互斥锁申请次数加1 	} } void release_mutex(mutex_lock* mutex){ if(mutex-&amp;gt;request_num &amp;gt; 1){ --mutex-&amp;gt;request_num;	//互斥锁申请次数减1 	return; }else{ --mutex-&amp;gt;reqauest_num;	mutex-&amp;gt;holder = NULL;	//清空持有者 	sema_free(&amp;amp;(mutex-&amp;gt;sig));	//信号量设为空闲 	} } </description>
    </item>
    
    <item>
      <title>Blanca-OS设计之内存管理（待更新）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%878-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%878-blanca-os%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>内存分布 Blanca-OS假定使用者的内存大于1G，并将1G的内核空间永远映射于地址的3/4高位之上（3GB-4GB），而超出1G内存的部分则被分配为用户空间并映射于地址的低位（0-3GB）。内核空间参考linux的设计分为了3个zone：DMA ZONE（0-1MB），NORMAL ZONE（1-896MB），HIGHMEM ZONE（896MB+）。Blanca-OS目前的内存管理模块主要聚焦于对NORMAL ZONE的管理，其他zone的管理与使用需等待后期的开发。
页管理结构 Blanca-OS对页的管理主要使用了以下的结构：
typedef struct{ list_node list; atomic_t count; uint32_t order; uint32_t flag; }page_t; 页管理结构体page_t（见inc/pmm.h）：
每一个页管理结构体存储了对应的一个或多个页的信息，包括：list（用于添加至空闲页表以标记每一个或一组空闲页），count（当前页引用计数），order（当前页管理结构体管理的页数为2的order次幂），flag（当前页状态）。
static page_t* p_pages = (page_t*)(uint32_t)KERNEL_END + KERNEL_BASE; 指向页管理结构体数组的指针p_pages（见mm/pmm.c）:该页管理结构体数组中记录了NORMAL ZONE中所有页对应的页管理结构体。
static list_node free_list[MAX_ORDER + 1]; 空闲页表free_list（见mm/buddy.c）：空闲页表记录了每一个order的空闲页集合所对应的链表头，可根据表头查找出一组所需大小空闲页对应的list值并反向确定该组起始空闲页的位置。
页管理算法 选用了伙伴算法： （updating&amp;hellip;）</description>
    </item>
    
    <item>
      <title>自制系统Blanca-OS记录（持续更新）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E5%AE%A27-%E8%87%AA%E5%88%B6%E7%B3%BB%E7%BB%9Fblanca-os%E8%AE%B0%E5%BD%95%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E5%AE%A27-%E8%87%AA%E5%88%B6%E7%B3%BB%E7%BB%9Fblanca-os%E8%AE%B0%E5%BD%95%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;h4 id=&#34;20200225&#34;&gt;2020.02.25&lt;/h4&gt;
&lt;p&gt;loader在加载内核文件到内存的时候出现莫名错误，表现为无法对某部分内存进行操作。起初排查认为是640KB以上至4GB的内存都无法写入，复查gdt表以及ds寄存器确认所选择的数据段覆盖了0-4GB范围，可读可写，经过十几小时的苦恼之后，终于尝试出1MB以上的内存可写入，而之前无法写入主要是因为我采用了640KB出头的内存区域及0xc0001500进行尝试,前者属于BIOS扩展区，无法写入，后者超出了我所设置的虚拟机的总内存32MB，属于不存在的区域，其实至今出现的很多莫名错误本质上都是小问题，但总会因为自己的粗心失误造成大量的时间损失。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2019年终总结</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E5%AE%A26-2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E5%AE%A26-2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;已经步入2020年的第十天了，才想起来写一篇2019年的总结（其实是看到某非著名网友🍞说：“大佬都是不写年终总结的。”看看自己这么菜，还是写点总结反省反省比较好。）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何拆除CMU-15213的bomb lab？（2）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%875-%E5%A6%82%E4%BD%95%E6%8B%86%E9%99%A4cmu-15213%E7%9A%84bomb-lab2/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%875-%E5%A6%82%E4%BD%95%E6%8B%86%E9%99%A4cmu-15213%E7%9A%84bomb-lab2/</guid>
      <description>&lt;h3 id=&#34;phase-3&#34;&gt;phase 3：&lt;/h3&gt;
&lt;p&gt;执行以下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0x400e72&lt;/span&gt;		&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;在&lt;/span&gt;phase_3函数调用处设置断点
......
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;（输入任意字符串）&lt;/span&gt;
stepi 				&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;单步执行，进入&lt;/span&gt;phase_3函数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>如何拆除CMU-15213的bomb lab？（1）</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E6%96%874-%E5%A6%82%E4%BD%95%E6%8B%86%E9%99%A4cmu-15213%E7%9A%84bomb-lab1/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E6%96%874-%E5%A6%82%E4%BD%95%E6%8B%86%E9%99%A4cmu-15213%E7%9A%84bomb-lab1/</guid>
      <description>&lt;h3 id=&#34;phase-1&#34;&gt;phase 1：&lt;/h3&gt;
&lt;p&gt;用gdb调试器打开bomb程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb bomb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>详解KMP算法</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E5%AE%A23-%E8%AF%A6%E8%A7%A3kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E5%AE%A23-%E8%AF%A6%E8%A7%A3kmp%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;引子&#34;&gt;&lt;strong&gt;引子&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这几天自学了KMP算法，也在网上看了很多相关的博文，然而他们对next数组的求解方法的解释都比较模糊，难于让读者理解，故参考几位前辈的博文，加以优化，撰此博文，分享一下自己的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近的一些情况总结</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E5%AE%A22-%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%85%E5%86%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E5%AE%A22-%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%85%E5%86%B5%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;博客搭了好几个月了，因为个人能力不足，很少更新。
上学期搞了搞Python,一个人做了个大作业，到头来发现自己其实也就是个调包侠，内心比较迷茫。
最近也挺忙，被项目搞得焦头烂额，实在想摆脱干什么都觉得自己没用的困境，现在打算开个新坑调整一下，关于scheme语言的，大概会读些相关的书，做些总结，记录在博客中。
以上。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Hello,world!</title>
      <link>https://blanca.world/archives/%E5%8D%9A%E5%AE%A21-hello-world/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blanca.world/archives/%E5%8D%9A%E5%AE%A21-hello-world/</guid>
      <description>一只咸鱼踏出了翻身的第一步。</description>
    </item>
    
  </channel>
</rss>
